library(drc)
library(ggplot2)
library(ggh4x)

## Is this the best code? no. Does it work? yes ##
# Again, same format of data as above 
eos <- read.csv("file = eos.csv", header = TRUE)

long <- eos %>%
  pivot_longer(
    cols = `x_1`:`x_154`,
    names_to = "PID",
    values_to = "eos"
  ) %>%
  na.omit()

average <- long %>%
  group_by(PID) %>%
  summarise(mean(eos))

low <- long %>%
  group_by(PID) %>%
  summarize(prob = (sum(eos >= 150)) / (sum(eos >= 150 | eos < 150)))

high <- long %>%
  group_by(PID) %>%
  summarize(prob = (sum(eos >= 300)) / (sum(eos >= 300 | eos < 300)))

merge_one <- unique(left_join(average,low,by="PID"))
merge_final <- unique(left_join(merge_one, high, by="PID"))
colnames(merge_final) <- c("PID", "average", "low", "high")

mod1 <- drm(low ~ average, data = merge_final, fct = LL.2())
mod2 <- drm(high ~ average, data = merge_final, fct = LL.2())

ED(mod1, c(5, 95), interval = "delta")
ED(mod2, c(5, 95), interval = "delta")

low_curve <-
  ggplot(data = merge_final,
         aes(
           x = average,
           y = low)) +
  geom_point(shape=16) +
  geom_smooth(method = drm, 
              method.args = list(fct = LL.2()), 
              se = FALSE, 
              color = "black") +
  geom_vline(xintercept = 150, linetype="solid", color = "red", size=1) +
  xlab("Average Eosinophil Count") +
  ylab("Proportion of Measurements ≥150 cells/ul") +
  labs(tag = "4a)") +
  scale_x_log10(minor_breaks = seq(0, 1000, by = 100), guide = "axis_minor") +
  theme_classic()

high_curve <-
  ggplot(data = merge_final,
         aes(
           x = average,
           y = high)) +
  geom_point(shape=16) +
  geom_smooth(method = drm, 
              method.args = list(fct = LL.2()), 
              se = FALSE, 
              color = "black") +
  geom_vline(xintercept = 300, linetype="solid", color = "red", size=1) +
  xlab("Average Eosinophil Count") +
  ylab("Proportion of Measurements ≥300 cells/ul") +
  labs(tag = "4b)") +
  scale_x_log10(minor_breaks = seq(0, 1000, by = 100), guide = "axis_minor") +
  theme_classic()

grid.arrange(low_curve, high_curve, nrow = 1)
